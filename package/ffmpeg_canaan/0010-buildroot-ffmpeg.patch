Index: b/libavcodec/libk510_h264.c
===================================================================
--- a/libavcodec/libk510_h264.c
+++ b/libavcodec/libk510_h264.c
@@ -85,6 +85,8 @@ typedef struct libk510_h264Context {
 #define SHARE_MEMORY_ALIGN_ALLOC    _IOWR('m', 2, unsigned long)
 #define SHARE_MEMORY_FREE           _IOWR('m', 3, unsigned long)
 #define SHARE_MEMORY_SHOW           _IOWR('m', 4, unsigned long)
+#define SHARE_MEMORY_INVAL_RANGE    _IOWR('m', 5, unsigned long)
+#define SHARE_MEMORY_WB_RANGE       _IOWR('m', 6, unsigned long)
 
 struct share_memory_alloc_align_args {
     unsigned int size;
@@ -92,6 +94,11 @@ struct share_memory_alloc_align_args {
     unsigned int phyAddr;
 };
 
+struct memory_cache_sync_request {
+    uint64_t size;
+    uint64_t vaddr;
+    uint64_t paddr;
+};
 
 static volatile int received_sigterm; 
 static void exit_handler(int sig)
@@ -215,11 +222,24 @@ static void planer_to_semi(AVCodecContex
     memcpy(data, pY, pic->linesize[0]*avctx->height);
     data += pic->linesize[0]*avctx->height;
 
-    for(i=0; i<pic->linesize[0]*avctx->height/2; i++)
+    for(i=0; i<pic->linesize[1]*avctx->height; i++)
     {
         *data++ = *pU++;
         *data++ = *pV++;
     }
+
+    struct memory_cache_sync_request request;
+  
+    request.paddr = pCtx->yuv_phyAddr;
+    request.vaddr = pCtx->yuv_vAddr;
+    request.size  = data - pCtx->yuv_vAddr;
+    request.size  = ((request.size + 0x1F) & (~0x1F));
+
+    if(ioctl(pCtx->fd_share_memory, SHARE_MEMORY_WB_RANGE, &request) < 0)
+    {
+      printf("fd wb range op failure!\r\n");
+    }   
+   
 }
 
 static unsigned long int get_time()
@@ -261,6 +281,15 @@ static int k510_h264_encode_frame(AVCode
         pCtx->in_pic++;
         //printf("%s>in pts %ld, time %.4f ms\n", __FUNCTION__, pic->pts, get_time()/1000000.0);
         
+        if(pic->format == AV_PIX_FMT_NV12)
+        {
+            input.data = pic->data[0];
+        }
+        else
+        {           
+            planer_to_semi(avctx, pic);
+            input.data = (unsigned char*)pCtx->yuv_phyAddr;
+        }
 #ifdef YUV_DUMP
         static FILE *dump_file=NULL;
         unsigned char* yuv_vAddr;
@@ -272,28 +301,19 @@ static int k510_h264_encode_frame(AVCode
                 printf("Cannot open output file!\n");
             }
         }
-        yuv_vAddr = (unsigned char*)mmap(NULL, pCtx->yuv_size, PROT_READ|PROT_WRITE, MAP_SHARED, pCtx->fd_ddr, pic->data[0]); 
-        if(pCtx->in_pic <= 10)
+        yuv_vAddr = (unsigned char*)mmap(NULL, pCtx->yuv_size, PROT_READ|PROT_WRITE, MAP_SHARED, pCtx->fd_ddr, input.data); 
+        if(pCtx->in_pic <= 300)
         {
             fwrite(yuv_vAddr, 1, pic->linesize[0]*avctx->height*3/2, dump_file);
             printf("YUV_DUMP pic %d\n", pCtx->in_pic);
         }
-        if(pCtx->in_pic == 10)
+        if(pCtx->in_pic == 300)
         {
             fclose(dump_file);
             printf("YUV_DUMP is done\n");
         }      
         munmap((void*)yuv_vAddr, pCtx->yuv_size);
 #endif
-        if(pic->format == AV_PIX_FMT_NV12)
-        {
-            input.data = pic->data[0];
-        }
-        else
-        {           
-            planer_to_semi(avctx, pic);
-            input.data = (unsigned char*)pCtx->yuv_phyAddr;
-        }
 
         input.width = avctx->width;
         input.height = avctx->height;
Index: b/libavdevice/v4l2.c
===================================================================
--- a/libavdevice/v4l2.c
+++ b/libavdevice/v4l2.c
@@ -85,7 +85,7 @@ struct share_memory_alloc_align_args {
 #define DDR_CTRL_REG_BASE 0x98000000
 #define NOC_QOS_REG_BASE  0x99900000
 #define MAILBOX_REG_BASE  0x970E0000
-#define ISP_ADDR_BUFFER_CNT  10
+#define ISP_ADDR_BUFFER_CNT  15
 
 struct video_data {
     AVClass *class;
@@ -105,13 +105,20 @@ struct video_data {
     int fd_ddr;
     int fd_share_memory;
     int pts;
-    unsigned int    reg_QoS_ctrl0;
-    unsigned int    reg_QoS_ctrl1;
-    unsigned int    reg_QoS_ctrl2;
-    unsigned int    reg_h264_bw;
-    unsigned int    reg_isp_pri;
-    unsigned int    reg_isp_mode;
-    unsigned int    reg_ddr_cli;
+	  int repeat_index;
+	  unsigned int buf_bytesused;
+    unsigned int reg_QoS_ctrl0;
+    unsigned int reg_QoS_ctrl1;
+    unsigned int reg_QoS_ctrl2;
+    unsigned int reg_h264_bw;
+    unsigned int reg_isp_pri;
+    unsigned int reg_isp_mode;
+    unsigned int reg_ddr_cli;
+    unsigned long int time;
+    unsigned long int start_time;
+    unsigned long int check_time;
+    int fr;
+    int isp_pic_cnt;
     /*----------------------------------------*/
 
     int buffers;
@@ -170,7 +177,7 @@ static void isp_init(AVFormatContext *ct
     m_info.video_height = s->height;
     mediactl_init(&m_info);
   
-    mediactl_set_ae();
+    //mediactl_set_ae();
     
     s->pts = 0;
   
@@ -229,6 +236,65 @@ static void isp_deinit(AVFormatContext *
     close(s->fd_ddr);
 }
 
+static unsigned long int get_time()
+{
+  struct timespec time;
+        
+  clock_gettime(CLOCK_REALTIME, &time);
+  
+  return time.tv_sec * 1000LL * 1000LL * 1000LL + time.tv_nsec;
+}
+
+static int isp_sync(AVFormatContext *ctx)
+{
+  struct video_data *s = ctx->priv_data;
+
+  s->isp_pic_cnt++;
+
+  s->time = get_time();
+  
+  if(s->start_time == 0)
+  {
+    s->start_time = s->time;
+  }
+  
+  if(s->check_time == 0)
+  {
+    s->check_time = s->time;
+  }     
+        
+  if(s->time - s->check_time >= 1000000000)
+  {
+    unsigned long int cap_time, elasp_time, delta=0, duration;
+    
+    s->check_time = 0;
+
+    duration = 1000000.0/s->fr;
+    elasp_time = (s->time - s->start_time)/1000.0;
+    cap_time = s->isp_pic_cnt*duration;
+    if(cap_time < elasp_time)
+    {
+      delta = elasp_time - cap_time;
+      if(delta > duration/2)
+      {
+        //printf("repeat: cnt %d, elasp_time %.4f ms, cap_time %.4f ms\n", s->isp_pic_cnt, elasp_time/1000.0, cap_time/1000.0);
+        return 1;
+      }
+    }
+    else
+    {
+      delta = cap_time - elasp_time;
+      if(delta > duration/2)
+      {
+        //printf("drop: cnt %d, elasp_time %.4f ms, cap_time %.4f ms\n", s->isp_pic_cnt, elasp_time/1000.0, cap_time/1000.0);
+        return -1;
+      }
+    }
+  }
+  
+  return 0;
+}
+
 static int device_open(AVFormatContext *ctx, const char* device_path)
 {
     struct video_data *s = ctx->priv_data;
@@ -273,6 +339,7 @@ static int device_open(AVFormatContext *
     if(s->isp)
     {
         isp_init(ctx);
+		    s->repeat_index = ISP_ADDR_BUFFER_CNT;
     }
 
     fd = v4l2_open(device_path, flags, 0);
@@ -580,7 +647,7 @@ static int enqueue_buffer(struct video_d
 
     if (v4l2_ioctl(s->fd, VIDIOC_QBUF, buf) < 0) {
         res = AVERROR(errno);
-        av_log(NULL, AV_LOG_ERROR, "ioctl(VIDIOC_QBUF): %s\n", av_err2str(res));
+        av_log(NULL, AV_LOG_ERROR, "ioctl(VIDIOC_QBUF): %s, index %d\n", av_err2str(res), buf->index);
     } else {
         atomic_fetch_add(&s->buffers_queued, 1);
     }
@@ -593,8 +660,7 @@ static void mmap_release_buffer(void *op
     struct v4l2_buffer buf = { 0 };
     struct buff_data *buf_descriptor = opaque;
     struct video_data *s = buf_descriptor->s;
-
-
+
     if(s->fd < 0)  return;
 
     buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
@@ -606,10 +672,18 @@ static void mmap_release_buffer(void *op
         buf.m.userptr = (unsigned long)s->buf_start[buf.index];
     }
     av_free(buf_descriptor);
-
-    enqueue_buffer(s, &buf);    
+
+    //printf("%s>index %d\n", __FUNCTION__, buf_descriptor->index);
+    
+    enqueue_buffer(s, &buf);
+}
+
+static void mmap_no_release_buffer(void *opaque, uint8_t *data)
+{
+    //do nothing
+    return;
 }
-
+
 #if HAVE_CLOCK_GETTIME && defined(CLOCK_MONOTONIC)
 static int64_t av_gettime_monotonic(void)
 {
@@ -670,8 +744,8 @@ static int convert_timestamp(AVFormatCon
 #endif
     return 0;
 }
-
-static int mmap_read_frame(AVFormatContext *ctx, AVPacket *pkt)
+
+static int mmap_read_frame_usrptr(AVFormatContext *ctx, AVPacket *pkt)
 {
     struct video_data *s = ctx->priv_data;
     struct v4l2_buffer buf = {
@@ -679,111 +753,104 @@ static int mmap_read_frame(AVFormatConte
         .memory = s->memory
     };
     struct timeval buf_ts;
-    int res;
+    int res, ret;
+    int repeat = 0;
+    struct buff_data *buf_descriptor;
 
     pkt->size = 0;
 
-    /* FIXME: Some special treatment might be needed in case of loss of signal... */
-    while ((res = v4l2_ioctl(s->fd, VIDIOC_DQBUF, &buf)) < 0 && (errno == EINTR));
-    if (res < 0) {
-        if (errno == EAGAIN)
-            return AVERROR(EAGAIN);
-
-        res = AVERROR(errno);
-        av_log(ctx, AV_LOG_ERROR, "ioctl(VIDIOC_DQBUF): %s\n",
-               av_err2str(res));
-        return res;
+    if(s->repeat_index < ISP_ADDR_BUFFER_CNT)
+    {
+      buf.index = s->repeat_index;
+      buf.bytesused = s->buf_bytesused;
+      s->repeat_index = ISP_ADDR_BUFFER_CNT;
     }
-
-    buf_ts = buf.timestamp;
-
+    else
+    {
+      /* FIXME: Some special treatment might be needed in case of loss of signal... */
+      while ((res = v4l2_ioctl(s->fd, VIDIOC_DQBUF, &buf)) < 0 && (errno == EINTR));
+      if (res < 0) {
+          if (errno == EAGAIN)
+              return AVERROR(EAGAIN);
+
+          res = AVERROR(errno);
+          av_log(ctx, AV_LOG_ERROR, "ioctl(VIDIOC_DQBUF): %s\n",
+                 av_err2str(res));
+          return res;
+      }
+      
+      buf_ts = buf.timestamp;
+
+      ret = isp_sync(ctx);
+      if(ret == -1)
+      {
+        struct buff_data *buf_descriptor;
+        
+        pkt->size = 0;
+        s->repeat_index = ISP_ADDR_BUFFER_CNT;
+
+        buf_descriptor = av_malloc(sizeof(struct buff_data));
+        buf_descriptor->index = buf.index;
+        buf_descriptor->s     = s;
+        mmap_release_buffer(buf_descriptor, NULL);
+        //printf("%s>drop index %d\n", __FUNCTION__, buf.index);
+        return 0;
+      }
+      else if(ret == 1)
+      {
+        s->repeat_index = buf.index;
+        s->buf_bytesused = buf.bytesused;
+        repeat = 1;
+        //printf("%s>repeat index %d\n", __FUNCTION__, buf.index);
+      }
+      else
+      {
+        s->repeat_index = ISP_ADDR_BUFFER_CNT;
+        //printf("%s>index %d\n", __FUNCTION__, buf.index);
+      }
+    }    
+    
     if (buf.index >= s->buffers) {
         av_log(ctx, AV_LOG_ERROR, "Invalid buffer index received.\n");
         return AVERROR(EINVAL);
     }
-    atomic_fetch_add(&s->buffers_queued, -1);
-    // always keep at least one buffer queued
-    av_assert0(atomic_load(&s->buffers_queued) >= 1);
-
-#ifdef V4L2_BUF_FLAG_ERROR
-    if (buf.flags & V4L2_BUF_FLAG_ERROR) {
-        av_log(ctx, AV_LOG_WARNING,
-               "Dequeued v4l2 buffer contains corrupted data (%d bytes).\n",
-               buf.bytesused);
-        buf.bytesused = 0;
-    } else
-#endif
-    {
-        /* CPIA is a compressed format and we don't know the exact number of bytes
-         * used by a frame, so set it here as the driver announces it. */
-        if (ctx->video_codec_id == AV_CODEC_ID_CPIA)
-            s->frame_size = buf.bytesused;
-
-        if (s->frame_size > 0 && buf.bytesused != s->frame_size) {
-            av_log(ctx, AV_LOG_WARNING,
-                   "Dequeued v4l2 buffer contains %d bytes, but %d were expected. Flags: 0x%08X.\n",
-                   buf.bytesused, s->frame_size, buf.flags);
-            buf.bytesused = 0;
-        }
-    }
 
-    /* Image is at s->buff_start[buf.index] */
-    if (atomic_load(&s->buffers_queued) == FFMAX(s->buffers / 8, 1)) {
-        /* when we start getting low on queued buffers, fall back on copying data */
-        res = av_new_packet(pkt, buf.bytesused);
-        if (res < 0) {
-            av_log(ctx, AV_LOG_ERROR, "Error allocating a packet.\n");
-            enqueue_buffer(s, &buf);
-            return res;
-        }
-        memcpy(pkt->data, s->buf_start[buf.index], buf.bytesused);
+    pkt->data = s->buf_paddr[buf.index];
 
-        res = enqueue_buffer(s, &buf);
-        if (res) {
-            av_packet_unref(pkt);
-            return res;
-        }
-    } else {
-        struct buff_data *buf_descriptor;
+    //printf("%s>out index %d\n", __FUNCTION__, buf.index);
 
-        if(s->isp && s->memory == V4L2_MEMORY_USERPTR)
-        {
-            pkt->data = s->buf_paddr[buf.index];
-        }
-        else
-        {
-            pkt->data = s->buf_start[buf.index];
-        }
-
-        pkt->size     = buf.bytesused;
+    pkt->size = buf.bytesused;
 
-        buf_descriptor = av_malloc(sizeof(struct buff_data));
-        if (!buf_descriptor) {
-            /* Something went wrong... Since av_malloc() failed, we cannot even
-             * allocate a buffer for memcpying into it
-             */
-            av_log(ctx, AV_LOG_ERROR, "Failed to allocate a buffer descriptor\n");
-            enqueue_buffer(s, &buf);
+    buf_descriptor = av_malloc(sizeof(struct buff_data));
+    if (!buf_descriptor) {
+        /* Something went wrong... Since av_malloc() failed, we cannot even
+         * allocate a buffer for memcpying into it
+         */
+        av_log(ctx, AV_LOG_ERROR, "Failed to allocate a buffer descriptor\n");
+        enqueue_buffer(s, &buf);
 
-            return AVERROR(ENOMEM);
-        }
-        buf_descriptor->index = buf.index;
-        buf_descriptor->s     = s;
-
-        pkt->buf = av_buffer_create(pkt->data, pkt->size, mmap_release_buffer,
-                                    buf_descriptor, 0);
-        if (!pkt->buf) {
-            av_log(ctx, AV_LOG_ERROR, "Failed to create a buffer\n");
-            enqueue_buffer(s, &buf);
-            av_freep(&buf_descriptor);
-            return AVERROR(ENOMEM);
-        }
+        return AVERROR(ENOMEM);
+    }
+    buf_descriptor->index = buf.index;
+    buf_descriptor->s = s;
+
+    if(repeat == 1)
+    {
+        pkt->buf = av_buffer_create(pkt->data, pkt->size, mmap_no_release_buffer, buf_descriptor, 0);
+    }
+    else
+    {
+        pkt->buf = av_buffer_create(pkt->data, pkt->size, mmap_release_buffer, buf_descriptor, 0);
+    }
+    
+    if (!pkt->buf) {
+        av_log(ctx, AV_LOG_ERROR, "Failed to create a buffer\n");
+        enqueue_buffer(s, &buf);
+        av_freep(&buf_descriptor);
+        return AVERROR(ENOMEM);
     }
-    
-    pkt->pts = buf_ts.tv_sec * INT64_C(1000000) + buf_ts.tv_usec;
-    convert_timestamp(ctx, &pkt->pts);
 
-    if(s->memory == V4L2_MEMORY_USERPTR && pkt->size > 0)
+    if(pkt->size > 0)
     {
         s->pts += 1;
         pkt->pts = s->pts;
@@ -792,7 +859,115 @@ static int mmap_read_frame(AVFormatConte
     
     //printf("%s>data 0x%x, pts %ld, size %d\n", __FUNCTION__, pkt->data, pkt->pts, pkt->size);
     return pkt->size;
-}
+}
+
+
+static int mmap_read_frame(AVFormatContext *ctx, AVPacket *pkt)
+{
+    struct video_data *s = ctx->priv_data;
+    struct v4l2_buffer buf = {
+        .type   = V4L2_BUF_TYPE_VIDEO_CAPTURE,
+        .memory = V4L2_MEMORY_MMAP
+    };
+    struct timeval buf_ts;
+    int res;
+
+    pkt->size = 0;
+
+    /* FIXME: Some special treatment might be needed in case of loss of signal... */
+    while ((res = v4l2_ioctl(s->fd, VIDIOC_DQBUF, &buf)) < 0 && (errno == EINTR));
+    if (res < 0) {
+        if (errno == EAGAIN)
+            return AVERROR(EAGAIN);
+
+        res = AVERROR(errno);
+        av_log(ctx, AV_LOG_ERROR, "ioctl(VIDIOC_DQBUF): %s\n",
+               av_err2str(res));
+        return res;
+    }
+
+    buf_ts = buf.timestamp;
+
+    if (buf.index >= s->buffers) {
+        av_log(ctx, AV_LOG_ERROR, "Invalid buffer index received.\n");
+        return AVERROR(EINVAL);
+    }
+    atomic_fetch_add(&s->buffers_queued, -1);
+    // always keep at least one buffer queued
+    av_assert0(atomic_load(&s->buffers_queued) >= 1);
+
+#ifdef V4L2_BUF_FLAG_ERROR
+    if (buf.flags & V4L2_BUF_FLAG_ERROR) {
+        av_log(ctx, AV_LOG_WARNING,
+               "Dequeued v4l2 buffer contains corrupted data (%d bytes).\n",
+               buf.bytesused);
+        buf.bytesused = 0;
+    } else
+#endif
+    {
+        /* CPIA is a compressed format and we don't know the exact number of bytes
+         * used by a frame, so set it here as the driver announces it. */
+        if (ctx->video_codec_id == AV_CODEC_ID_CPIA)
+            s->frame_size = buf.bytesused;
+
+        if (s->frame_size > 0 && buf.bytesused != s->frame_size) {
+            av_log(ctx, AV_LOG_WARNING,
+                   "Dequeued v4l2 buffer contains %d bytes, but %d were expected. Flags: 0x%08X.\n",
+                   buf.bytesused, s->frame_size, buf.flags);
+            buf.bytesused = 0;
+        }
+    }
+
+    /* Image is at s->buff_start[buf.index] */
+    if (atomic_load(&s->buffers_queued) == FFMAX(s->buffers / 8, 1)) {
+        /* when we start getting low on queued buffers, fall back on copying data */
+        res = av_new_packet(pkt, buf.bytesused);
+        if (res < 0) {
+            av_log(ctx, AV_LOG_ERROR, "Error allocating a packet.\n");
+            enqueue_buffer(s, &buf);
+            return res;
+        }
+        memcpy(pkt->data, s->buf_start[buf.index], buf.bytesused);
+
+        res = enqueue_buffer(s, &buf);
+        if (res) {
+            av_packet_unref(pkt);
+            return res;
+        }
+    } else {
+        struct buff_data *buf_descriptor;
+
+        pkt->data     = s->buf_start[buf.index];
+        pkt->size     = buf.bytesused;
+
+        buf_descriptor = av_malloc(sizeof(struct buff_data));
+        if (!buf_descriptor) {
+            /* Something went wrong... Since av_malloc() failed, we cannot even
+             * allocate a buffer for memcpying into it
+             */
+            av_log(ctx, AV_LOG_ERROR, "Failed to allocate a buffer descriptor\n");
+            enqueue_buffer(s, &buf);
+
+            return AVERROR(ENOMEM);
+        }
+        buf_descriptor->index = buf.index;
+        buf_descriptor->s     = s;
+
+        pkt->buf = av_buffer_create(pkt->data, pkt->size, mmap_release_buffer,
+                                    buf_descriptor, 0);
+        if (!pkt->buf) {
+            av_log(ctx, AV_LOG_ERROR, "Failed to create a buffer\n");
+            enqueue_buffer(s, &buf);
+            av_freep(&buf_descriptor);
+            return AVERROR(ENOMEM);
+        }
+    }
+    pkt->pts = buf_ts.tv_sec * INT64_C(1000000) + buf_ts.tv_usec;
+    convert_timestamp(ctx, &pkt->pts);
+
+    return pkt->size;
+}
+
 
 static int mmap_start(AVFormatContext *ctx)
 {
@@ -1200,7 +1375,8 @@ static int v4l2_read_header(AVFormatCont
                    s->framerate);
             return ret;
         }
-        
+
+        s->fr = framerate_q.num;
         st->time_base.num = framerate_q.num;
         st->time_base.den = framerate_q.den;
         st->codecpar->format = AV_PIX_FMT_NV12;
@@ -1227,10 +1403,20 @@ FF_DISABLE_DEPRECATION_WARNINGS
 FF_ENABLE_DEPRECATION_WARNINGS
 #endif
     int res;
-
-    if ((res = mmap_read_frame(ctx, pkt)) < 0) {
-        return res;
-    }
+
+    if(s->isp && s->memory == V4L2_MEMORY_USERPTR)
+    {
+        if ((res = mmap_read_frame_usrptr(ctx, pkt)) < 0)
+        {
+            return res;
+        }
+    }
+    else
+    {
+        if ((res = mmap_read_frame(ctx, pkt)) < 0) {
+            return res;
+        }
+    }
 
 #if FF_API_CODED_FRAME && FF_API_LAVF_AVCTX
 FF_DISABLE_DEPRECATION_WARNINGS
Index: b/libavformat/rtpenc_jpeg.c
===================================================================
--- a/libavformat/rtpenc_jpeg.c
+++ b/libavformat/rtpenc_jpeg.c
@@ -54,6 +54,8 @@ void ff_rtp_send_jpeg(AVFormatContext *s
                (s1->streams[0]->codecpar->color_range == AVCOL_RANGE_JPEG &&
                 s1->streams[0]->codecpar->format == AV_PIX_FMT_YUV420P)) {
         type = 1;
+    } else if (s1->streams[0]->codecpar->format == AV_PIX_FMT_NV12) {
+        type = 1;   /* for libk510_jpeg encoder */
     } else {
         av_log(s1, AV_LOG_ERROR, "Unsupported pixel format\n");
         return;
